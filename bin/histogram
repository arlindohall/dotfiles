#!/Users/millerhall/.asdf/installs/ruby/3.4.3/bin/ruby
# frozen_string_literal: true

require 'io/console'

require_relative 'lib/notes'

class Histogram
  def self.call
    new(ARGV, $stdout).call
  end

  def initialize(argv, stdout)
    @argv = argv
    @stdout = stdout
  end

  def call
    return help if args[:help]

    flag_counts
      .first(limit)
      .each do |flag, count|
        puts "#{"#{flag}:".ljust(padding)} #{hashes(count)}"
      end
  end

  private

  def help
    puts <<~HELP
      Usage: histogram [OPTIONS]        show histogram of flags

      Options:
        --help, -h                     show help
        --limit, -l [NUMBER]           limit to NUMBER of flags
        --no-limit, -nl                show all flags
        --year, -y [YEAR]              limit to YEAR
        --no-year, -ny                 limit to this year
    HELP
  end

  def limit
    return flag_counts.size if args[:no_limit]

    args[:limit] || 10
  end

  def year
    return if args[:no_year]

    args[:year] || Time.now.year
  end

  def flag_counts
    @flag_counts ||= Notes.flags
                          .then { |flags| year ? flags.transform_values { |flags| only_this_year(flags) } : flags }
                          .transform_values(&:count)
                          .reject { |_flags, count| count.zero? }
                          .sort_by { |_flag, count| count }
                          .reject { |flag, _count| flag == 'flag' }
                          .reverse
  end

  def only_this_year(flags)
    flags.select { |flag| flag.year == year }
  end

  def hashes(count)
    '#' * (count.to_f * hash_width / max_count).to_i
  end

  def padding
    space_for_words
  end

  def hash_width
    0.8 * space_for_hash
  end

  def space_for_hash
    term_width - space_for_words
  end

  def space_for_words
    max_word_length + 2
  end

  def max_word_length
    @max_word_length ||= Notes.flags.keys.map(&:size).max
  end

  def term_width
    _y, x = @stdout.winsize
    x
  end

  def max_count
    @max_count ||= flag_counts.map(&:last).max
  end

  def args
    return @args if @args

    @args = {}

    until @argv.empty?
      case (arg = @argv.shift)
      when '--help', '-h'
        @args[:help] = true
      when '--limit', '-l'
        @args[:limit] = @argv.shift.to_i
      when /^-l/
        @args[:limit] = arg.sub(/-l/, '').to_i
      when '--no-limit', '-nl'
        @args[:limit] = nil
      when '--year', '-y'
        @args[:year] = @argv.shift.to_i
      when /^-y/
        @args[:year] = arg.sub(/-y/, '').to_i
      when '--no-year', '-ny'
        @args[:no_year] = true
      else
        help
        exit
      end
    end

    @args
  end
end

Histogram.call
