#!/Users/millerhall/.asdf/installs/ruby/3.4.3/bin/ruby
# frozen_string_literal: true

require 'io/console'

module Command
  HOME = ENV['HOME']

  class Manager
    HOME_NAME = 'miller-home'

    def self.work? = instance.work?
    def self.instance = @instance ||= new
    def self.excalidraw_backup = work? ? WorkExcalidrawBackup : ExcalidrawBackup
    def self.tar_backup = TarBackup
    def self.git = work? ? WorkGitConfig : GitConfig
    def self.mobile_backup = work? ? WorkMobileBackup : MobileBackup
    def self.notes_dir = "#{HOME}/var/notes"

    private

    def work?
      hostname.include? HOME_NAME
    end

    def hostname = @hostname ||= `hostname`.strip
  end

  module Helper
    def pause(message, stat_ref, source = '')
      warn '--- Showing stat of changes...'
      system "git diff #{stat_ref} #{source} --stat"
      warn "--- About to #{message}; Would you like to continue? (y/n)"
      return if $stdin.getch.match(/[yY]/)

      exit 0
    end

    def git(command)
      return if command.split.first == 'commit' && `git diff HEAD`.chomp.empty?

      try "git #{command}"
    end

    def try(command)
      warn "Running: #{command}"
      abort unless system command
    end

    def todays_date
      @todays_date ||= Time.new.strftime('%b %d, %Y')
    end
  end

  class WorkExcalidrawBackup
    include Command::Helper

    DOCUMENTS_DIR = "#{HOME}/Documents/".freeze

    def self.call = new.call

    def call
      warn "Going to documents directory #{DOCUMENTS_DIR}"
      Dir.chdir(DOCUMENTS_DIR)

      warn "Creating tar file at #{HOME}/var/ ~/var/excalidraw-backup.tar.gz"
      try "tar -cvzf \"#{HOME}/var/excalidraw-backup.tar.gz\" Excalidraw"
    end
  end

  class ExcalidrawBackup
    def self.call; end
  end

  class TarBackup
    include Command::Helper

    def self.call = new.call

    def call
      warn "Going to notes directory #{ComputerType.notes_dir}"
      Dir.chdir(ComputerType.notes_dir)

      warn 'Creating tar file at $HOME/var/ ~/var/logseq-backup.tar.gz'
      try "tar -cvzf \"#{HOME}/var/logseq-backup.tar.gz\" logseq/"
    end
  end

  class WorkGitConfig
    def self.conventional_commit_tag = 'engineering-journal'
    def self.branch_name = 'tmp/rebasing-work'
    def self.push_command = 'push origin main'
  end

  class GitConfig
    def self.conventional_commit_tag = 'notes'
    def self.branch_name = 'tmp/rebasing-notes'
    def self.push_command = 'push origin mobile main'
  end
end

class NoteBackup
  include Command::Helper

  ICLOUD_DIRECTORY = "\"#{HOME}/Library/Mobile Documents/iCloud~com~logseq~logseq/Documents/mobile/\"".freeze

  def self.call = new.call

  def call
    Command::Manager.excalidraw_backup.call
    Command::Manager.tar_backup.call

    # Hacky but I'm tired. Skip the first diff, ls-files to get staged diff, then replay the first diff with --stat
    pause('create branch and add local changes', 'HEAD HEAD', '; git ls-files --other --exclude-standard; git diff HEAD')
    git "switch -c #{Command::Manager.git.branch_name}"
    git 'add .'
    pause('commit local changes', 'HEAD')
    git "commit -m \"docs(#{Command::Manager.git.conventional_commit_tag}): Note archive through #{todays_date}\" --no-edit"

    git 'switch main'
    git 'pull'

    warn 'Initiating merge...'
    warn 'If it succeeds, you will return to where you were before this command, otherwise you can stay here and fix conflicts.'

    pause('merge local changes into main', 'main', Command::Manager.git.branch_name)
    git "merge #{Command::Manager.git.branch_name} --log -m 'merge(#{Command::Manager.git.conventional_commit_tag}): Copy local changes into main #{todays_date}'"
    git "branch -d #{Command::Manager.git.branch_name}"

    unless Command::Manager.work?
      warn 'Pulling in changes from mobile...'

      pause('force-replace local changes with mobile changes', 'HEAD', 'mobile')
      git 'switch mobile'
      try "cp -r #{ICLOUD_DIRECTORY}* logseq/"
      git 'add .'
      git "commit -m \"docs(mobile): Mobile note sync through #{todays_date}\" --no-edit"

      git 'switch main'
      git 'pull'

      warn 'Initiating merge of mobile...'
      warn 'If it succeeds, you will return to where you were before this command, otherwise you can stay here and fix conflicts.'

      pause('merge mobile changes into main', 'main', 'mobile')
      git "merge mobile --log -m 'merge(mobile): Copy changes from mobile into main #{todays_date}'"

      git 'switch mobile'
      git "merge main --ff-only --log -m 'merge(mobile): Copy changes from mobile into main #{todays_date}'"

      try "cp -r logseq/* #{ICLOUD_DIRECTORY}"
    end

    git 'switch main'
    warn 'Backing up to remote...'
    pause('push changes to remote', 'origin/main', 'main')

    Command::Manager.git.push_command
    warn 'Backups can be found at ~/var/'
  end
end

NoteBackup.call
