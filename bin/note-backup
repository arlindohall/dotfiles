#!/Users/millerhall/.asdf/installs/ruby/3.4.3/bin/ruby
# frozen_string_literal: true
# typed: true

require 'io/console'
require 'pathname'

module Command
  HOME = ENV['HOME']

  class ConfigRouter
    HOME_NAME = 'miller-home'

    def self.work? = instance.work?
    def self.instance = @instance ||= new
    def self.excalidraw_backup = work? ? WorkExcalidrawBackup : ExcalidrawBackup
    def self.tar_backup = TarBackup
    def self.git = work? ? WorkGitConfig : GitConfig
    def self.mobile_git = MobileGitConfig
    def self.notes_dir = "#{HOME}/var/notes"

    def work?
      !(hostname.include? HOME_NAME)
    end

    def hostname = @hostname ||= `hostname`.strip
  end

  class Helper
    def initialize(stderr: $stderr)
      @stderr = stderr
    end

    def stat(git_cmd)
      warn '--- Showing stat of changes...'
      git("diff #{git_cmd} --stat")
    end

    def pause(message)
      warn "--- About to #{message}; Would you like to continue? (y/n)"
      return if $stdin.getch.match(/[yY]/)

      exit 0
    end

    def git(command)
      return if command.split.first == 'commit' && `git diff HEAD --stat`.chomp.empty?

      try "git #{command}"
    end

    def try(command)
      warn "Running: #{command}"
      abort unless system command
    end

    def warn(message)
      @stderr.puts(message)
    end

    def todays_date
      @todays_date ||= Time.new.strftime('%b %d, %Y')
    end
  end

  class WorkExcalidrawBackup
    DOCUMENTS_DIR = "#{HOME}/Documents/".freeze

    def self.call(helper) = new(helper).call

    def initialize(helper)
      @helper = helper
    end

    def call
      @helper.warn "Going to documents directory #{DOCUMENTS_DIR}"
      Dir.chdir(DOCUMENTS_DIR)

      @helper.warn "Creating tar file at #{HOME}/var/ ~/var/excalidraw-backup.tar.gz"
      @helper.try "tar -cvzf \"#{HOME}/var/excalidraw-backup.tar.gz\" Excalidraw"
    end
  end

  class ExcalidrawBackup
    def self.call(*params, **kw_params); end
  end

  class TarBackup
    def self.call(helper) = new(helper).call

    def initialize(helper)
      @helper = helper
    end

    def call
      @helper.warn "Going to notes directory #{Command::ConfigRouter.notes_dir}"
      Dir.chdir(Command::ConfigRouter.notes_dir)

      @helper.warn 'Creating tar file at $HOME/var/ ~/var/logseq-backup.tar.gz'
      @helper.try "tar -cvzf \"#{HOME}/var/logseq-backup.tar.gz\" logseq/"
    end
  end

  class WorkGitConfig
    def self.conventional_commit_tag = 'engineering-journal'
    def self.branch_name = 'tmp/rebasing-work'
    def self.push_command = 'push origin main'
  end

  class GitConfig
    def self.conventional_commit_tag = 'notes'
    def self.branch_name = 'tmp/rebasing-notes'
    def self.push_command = 'push origin mobile main'
  end

  class MobileGitConfig
    def self.conventional_commit_tag = 'mobile'
    def self.branch_name = 'mobile'
  end
end

class Backup
  class NoBackup
    def initialize(*params); end
    def backup; end
  end

  class LocalGitBackup
    def initialize(helper)
      @helper = helper
    end

    def conventional_commit_tag = Command::ConfigRouter.git.conventional_commit_tag
    def branch_name = Command::ConfigRouter.git.branch_name
    def push_command = Command::ConfigRouter.git.push_command
    def action = 'Note archive'

    def prefix
      @helper.git('ls-files --other --exclude-standard')
      @helper.stat('HEAD')
      @helper.pause('create branch and add local changes')
      @helper.git "switch -c #{branch_name}"
    end

    def postfix
      @helper.stat('HEAD')
      @helper.pause('commit local changes')
    end

    def cleanup
      @helper.git "branch -d #{branch_name}"
    end
  end

  class MobileGitBackup
    ICLOUD_DIRECTORY = "#{Command::HOME}/Library/Mobile Documents/iCloud~com~logseq~logseq/Documents/mobile/".freeze

    def initialize(helper)
      @helper = helper
    end

    def conventional_commit_tag = Command::ConfigRouter.mobile_git.conventional_commit_tag
    def branch_name = Command::ConfigRouter.mobile_git.branch_name
    def push_command = Command::ConfigRouter.mobile_git.push_command
    def action = 'Mobile note sync'

    def prefix
      @helper.stat('HEAD mobile')
      @helper.pause('force-replace local changes with mobile changes')
      @helper.git "switch #{branch_name}"
      @helper.try "cp -r \"#{ICLOUD_DIRECTORY}\"* logseq/"
    end

    def postfix
      @helper.stat('HEAD')
      @helper.pause('commit mobile files')
    end

    def cleanup
      @helper.git "switch #{branch_name}"
      @helper.git 'merge main --ff-only --log'
      @helper.try "cp -r logseq/* \"#{ICLOUD_DIRECTORY}\""

      icloud = Pathname.new(ICLOUD_DIRECTORY).realpath
      notes = Pathname.new('logseq').realpath
      icloud.glob('**').each do |file|
        local_path = notes.join(file.relative_path_from(icloud))
        # Okay to delete because we've already copied to local, and then rebased to pick up
        # any deletions that happened on the remote, this is sort of like doing rm -rf *
        # and then re-copying, which is what I did before I added this line
        file.delete unless local_path.exist?
      end
    end
  end

  def self.local(helper:)
    new(change: 'local', backup: LocalGitBackup.new(helper), helper: helper)
  end

  def self.mobile(helper:)
    return NoBackup.new if Command::ConfigRouter.work?

    new(change: 'mobile', backup: MobileGitBackup.new(helper), helper: helper)
  end

  def initialize(change:, backup:, helper:)
    @change = change
    @backup = backup
    @helper = helper
  end

  def backup
    @helper.warn "Pulling in changes from #{@change}..."

    @backup.prefix
    @helper.git 'add .'
    @backup.postfix

    @helper.git "commit -m \"docs(#{@backup.conventional_commit_tag}): #{@backup.action} through #{@helper.todays_date}\" --no-edit"
    @helper.git 'switch main'
    @helper.git 'pull'

    @helper.warn "Initiating merge of #{@change}..."
    @helper.warn 'If it succeeds, you will return to where you were before this command, otherwise you can stay here and fix conflicts.'

    @helper.stat("main #{@backup.branch_name}")
    @helper.pause("merge #{@change} changes into main")

    @helper.git "merge #{@backup.branch_name} --log -m 'merge(#{@backup.conventional_commit_tag}): Copy changes from #{@backup.branch_name} into main #{@helper.todays_date}'"

    @backup.cleanup
  end
end

class NoteBackup
  def self.call(helper:) = new(helper:).call

  def initialize(helper:)
    @helper = helper
  end

  def call
    warn 'excalidraw'
    Command::ConfigRouter.excalidraw_backup.call(@helper)
    warn 'tar'
    Command::ConfigRouter.tar_backup.call(@helper)

    warn 'local'
    Backup.local(helper: @helper).backup
    warn 'mobile'
    Backup.mobile(helper: @helper).backup

    @helper.git 'switch main'
    @helper.warn 'Backing up to remote...'
    @helper.stat('origin/main main')
    @helper.pause('push changes to remote')

    @helper.git Command::ConfigRouter.git.push_command
    @helper.warn 'Backups can be found at ~/var/'
  end
end

class Test
  class Helper
    def stat; end
    def pause; end
    def git; end
    def try; end
    def warn; end
    def todays_date; end
  end

  def run
    puts :success
  end
end

args = ARGV.dup
until args.empty?
  case (arg = arg.shift)
  when 'test'
    Test.run
    puts :success
    exit 0
  end
end

NoteBackup.call(helper: Command::Helper.new)
