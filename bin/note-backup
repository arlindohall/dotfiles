#!/Users/millerhall/.asdf/installs/ruby/3.4.3/bin/ruby
# frozen_string_literal: true

require 'io/console'

class NoteBackup
  HOME = ENV['HOME']
  ICLOUD_DIRECTORY = "\"#{HOME}/Library/Mobile Documents/iCloud~com~logseq~logseq/Documents/mobile/\"".freeze
  DOCUMENTS_DIR = "#{HOME}/Documents/".freeze

  def self.call = new.call

  def call
    notes_dir = "#{HOME}/var/notes"

    if work_computer?
      try "echo Moving to #{DOCUMENTS_DIR}"
      Dir.chdir(DOCUMENTS_DIR)

      warn "Creating tar file at #{HOME}/var/ ~/var/excalidraw-backup.tar.gz"
      try "tar -cvzf \"#{HOME}/var/excalidraw-backup.tar.gz\" Excalidraw"
    end

    warn "Going to notes directory #{notes_dir}"
    Dir.chdir(notes_dir)

    warn 'Creating tar file at $HOME/var/ ~/var/logseq-backup.tar.gz'
    try "tar -cvzf \"#{HOME}/var/logseq-backup.tar.gz\" logseq/"

    # Hacky but I'm tired. Skip the first diff, ls-files to get staged diff, then replay the first diff with --stat
    pause('create branch and add local changes', 'HEAD HEAD', '; git ls-files --other --exclude-standard; git diff HEAD')
    git "switch -c #{branch_name}"
    git 'add .'
    pause('commit local changes', 'HEAD')
    git "commit -m \"docs(#{conventional_commit_tag}): Note archive through #{todays_date}\" --no-edit"

    git 'switch main'
    git 'pull'

    warn 'Initiating merge...'
    warn 'If it succeeds, you will return to where you were before this command, otherwise you can stay here and fix conflicts.'

    pause('merge local changes into main', 'main', branch_name)
    git "merge #{branch_name} --log -m 'merge(#{conventional_commit_tag}): Copy local changes into main #{todays_date}'"
    git "branch -d #{branch_name}"

    unless work_computer?
      warn 'Pulling in changes from mobile...'

      pause('force-replace local changes with mobile changes', 'HEAD', 'mobile')
      git 'switch mobile'
      try "cp -r #{ICLOUD_DIRECTORY}* logseq/"
      git 'add .'
      git "commit -m \"docs(mobile): Mobile note sync through #{todays_date}\" --no-edit"

      git 'switch main'
      git 'pull'

      warn 'Initiating merge of mobile...'
      warn 'If it succeeds, you will return to where you were before this command, otherwise you can stay here and fix conflicts.'

      pause('merge mobile changes into main', 'main', 'mobile')
      git "merge mobile --log -m 'merge(mobile): Copy changes from mobile into main #{todays_date}'"

      git 'switch mobile'
      git "merge main --ff-only --log -m 'merge(mobile): Copy changes from mobile into main #{todays_date}'"

      try "cp -r logseq/* #{ICLOUD_DIRECTORY}"
    end

    git 'switch main'

    warn 'Backing up to remote...'

    pause('push changes to remote', 'origin/main', 'main')
    git work_computer? ? 'push origin main' : 'push origin mobile main'
    warn 'Backups can be found at ~/var/' if work_computer?
  end

  def pause(message, stat_ref, source = '')
    warn '--- Showing stat of changes...'
    system "git diff #{stat_ref} #{source} --stat"
    warn "--- About to #{message}; Would you like to continue? (y/n)"
    return if $stdin.getch.match(/[yY]/)

    exit 0
  end

  def git(command)
    return if command.split.first == 'commit' && `git diff HEAD`.chomp.empty?

    try "git #{command}"
  end

  def try(command)
    warn "Running: #{command}"
    abort unless system command
  end

  def todays_date
    @todays_date ||= Time.new.strftime('%b %d, %Y')
  end

  def branch_name
    if work_computer?
      'tmp/rebasing-work'
    else
      'tmp/rebasing-notes'
    end
  end

  def conventional_commit_tag
    if work_computer?
      'engineering-journal'
    else
      'notes'
    end
  end

  def work_computer?
    !`hostname`.include? 'miller-home'
  end
end

NoteBackup.call
