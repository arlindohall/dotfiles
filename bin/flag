#!/usr/bin/env ruby

require_relative 'lib/helpers'
require_relative 'lib/notes'

class Flag
  def self.call
    new(ARGV).call
  end

  def initialize(argv)
    @argv = argv
  end

  def call
    return help if args[:help]
    return all_flags unless name

    debug("-- Showing flags matching name '#{matching_name}'")
    flags_found.each do |flag|
      output(flag.file)
    end
  end

  private

  def all_flags
    puts Notes.flags
      .values
      .flatten
      .filter { |flag| args[:year] ? flag.year == args[:year] : true }
      .map { |flag| flag.flag }
      .uniq
      .join(" ")
  end

  def help
    puts <<~HELP
      Usage: flag             show list of all flags
             flag [name]      show list of files matching flag
             flag -h          show help

      Options:
        --help, -h           show help
        --year, -y [YEAR]    limit to YEAR (only works for list all flags)
    HELP
  end

  def flags_found
    flags_for_name.sort_by(&:file)
  end

  def flags_for_name
    @flags_for_name ||= flags_for_matching_name
  end

  def flags_for_matching_name
    matching_name ? Notes.flags[matching_name] : []
  end

  def matching_name
    @matching_name ||= find_matching_name
  end

  def find_matching_name
    return name if Notes.flags[name]

    Notes.flags
      .keys
      .sort
      .find { |bigger_name| bigger_name.match(name) }
  end

  def name
    args[:name]
  end

  def args
    @args ||= parse_args
  end

  def parse_args
    args = {}
    return args if @argv.empty?

    args[:name] = @argv.shift unless @argv.first.start_with?("-")

    until @argv.empty?
      case (arg = @argv.shift)
      when "-h", "--help"
        args[:help] = true
      when "-y", "--year"
        args[:year] = @argv.shift.to_i
      when /^-y/
        args[:year] = arg.sub(/-y/, "").to_i
      else
        help
        exit
      end
    end

    args
  end
end

Flag.call
