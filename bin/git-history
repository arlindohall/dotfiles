#!/usr/bin/env ruby
# frozen_string_literal: true

class History
  USAGE_STRING = <<~USAGE
    Usage: git history [options]

    Valid arguments:
      -h, --help, help:     Displays usage information and exits.
      -p:                   Indicates that a list of file paths will follow. The script
                            will show the diff for these files, and only on commits where
                            the files changed, going back to <trunk>.

    Options passed through to git:
      If you pass something that's not recognized by the parsing logic, it will be passed through to
      git in best-effot to keep the semantic order. This sometimes makes wonky things happen, but I
      figure that's better than having to annoyingly add individual params here...
  USAGE

  def self.call
    new(`git branch --show-current`.chomp, ARGV.dup).call
  end

  def initialize(branch, args)
    @branch = branch
    @args = args
  end

  def usage(err = 0)
    warn USAGE_STRING
    exit err
  end

  def parse! # rubocop:disable Metrics/MethodLength
    return if @parsed

    @parsed = true
    @files = []
    @unknown_args = []

    remaining = @args.dup
    while (arg = remaining.shift)
      case arg
      when '-h', '--help', 'help'
        usage
      when '-p', '--'
        @path_given = true
        @files, remaining = remaining, @files
      else
        @unknown_args = [arg, remaining]
        remaining = []
      end
    end
  end

  def call
    parse!

    additional_args = @unknown_args.empty? ? '' : @unknown_args.join(' ')
    branch_directive = @branch == 'main' ? 'origin/main..' : 'main..'
    file_directive = @path_given ? "-p #{@files.join(' ')}" : '--full-diff -p .'

    cmd = "git log #{branch_directive} --relative -a #{additional_args} #{file_directive}"
    system cmd
  end
end

History.call
