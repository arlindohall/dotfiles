#!/Users/millerhall/.asdf/installs/ruby/3.4.3/bin/ruby
# typed: true
# frozen_string_literal: true

require 'net/http'

require_relative 'lib/helpers'

class Manners
  class ArgParser
    def initialize(argv)
      @argv = argv
      parse!
    end

    def has_files?
      @args.key?(:files)
    end

    def files
      @args[:files]
    end

    private

    def parse!
      @args = {}

      until @argv.empty?
        arg = @argv.shift
        @args[:files] ||= []
        @args[:files] << arg
      end
    end
  end

  class << self
    def call
      new.call
    end
  end

  def initialize
    @args = ArgParser.new(ARGV)
    @stdin = $stdin
  end

  def call
    download_swear_words
    search_for_swear_words
  end

  # private

  def download_swear_words
    debug("Downloading swear words from #{swear_words_uri}")
    @download_swear_words ||= Net::HTTP.get(swear_words_uri)
                                       .gsub("\r", '')
                                       .split("\n")
  end

  def swear_words_uri
    URI('http://www.bannedwordlist.com/lists/swearWords.txt')
  end

  def search_for_swear_words
    if !@stdin.tty?
      search_stdin
    elsif @args.has_files?
      search_files
    else
      search_directory
    end
  end

  def search_files
    debug("Searching for #{@swear_words.size} swear words in files=#{@args.files}...")
    status = system("rg -w '#{@swear_words.join('|')}' #{@args.files.join(' ')}")

    exit(1) unless status
  end

  def search_directory
    debug("Searching for #{@swear_words.size} swear words in current directory...")
    status = system("rg -w '#{@swear_words.join('|')}'")

    exit(1) unless status
  end

  def search_stdin
    debug("Searching for #{@swear_words.size} swear words in standard in...")
    @stdin.each_line.each_with_index do |line, line_number|
      check_line(line, line_number)
    end
  end

  def check_line(line, line_number)
    if (word = @swear_words.find { |swear_word| matches(swear_word, line) })
      debug("Found swear word in line: #{line_number}:#{line.index(word)}")
      exit(1)
    end
  end

  def matches(swear_word, line)
    line.match(regex_for(swear_word))
  end

  def regex_for(swear_word)
    /\b#{swear_word}\b/i
  end
end

Manners.call
