#!/usr/bin/env ruby

require 'pathname'

require_relative 'lib/helpers'

class JournalService
  def self.call = new(ARGV).call

  def initialize(argv)
    @argv = argv
  end

  def call
    if has_journalfmt?
      command("journalctl -f --output=json #{additional_args} --unit=#{service_name} | #{journalfmt}")
    else
      command("journalctl -f #{additional_args} #{service_name}")
    end
  end

  # private

  def command(cmd)
    debug("-- Running command: #{cmd}")
    system(cmd)
  end

  def service_name
    return proc_name(input_name) if first_arg_is_service? && name_found?

    default_service_name
  end

  def proc_name(service)
    "proc-shopify--#{service}@server.service"
  end

  def name_found?
    input_name && service_exists?(input_name)
  end

  def service_exists?(service)
    command("systemctl status #{proc_name(service)}")
  end

  def input_name
    @argv.first if first_arg_is_service?
  end

  def default_service_name
    return proc_name(dir_name) if found_from_dir?

    debug("Unable to determine service name, tailing 'shopify'")
    proc_name("shopify")
  end

  def found_from_dir?
    @found_from_dir ||= service_exists?(dir_name)
  end

  def dir_name
    Pathname.new(ENV["PWD"]).basename
  end

  def additional_args
    additional_arg_list.join(" ")
  end

  def additional_arg_list
    first_arg_is_service? ? @argv.drop(1) : @argv
  end

  def first_arg_is_service?
    @argv.first && !@argv.first.start_with?("-")
  end

  def has_journalfmt?
    command("ls #{journalfmt}")
  end

  def journalfmt
    "/opt/spin/bin/journalfmt"
  end
end

JournalService.call
