#!/usr/bin/env ruby
# frozen_string_literal: true

class GitLogAll
  USAGE_STRING = <<~HELP
    Usage: git log-all [options]

    Options:
      -h, --help, help      Show this message
      short                 Show only the commits between this branch and <trunk>
  HELP

  def self.call
    new(`git branch --show-current`.chomp, ARGV.dup).call
  end

  def initialize(branch, args)
    @branch = branch
    @args = args
  end

  def usage(err = 0)
    warn USAGE_STRING
    exit err
  end

  def parse! # rubocop:disable Metrics/MethodLength
    return if @parsed

    @parsed = true
    @files = []

    remaining = @args.dup
    while (arg = remaining.shift)
      case arg
      when '-h', '--help', 'help'
        usage 0
      when 'short'
        @short = true
      when '-p', '--'
        @files, remaining = remaining, @files
      when '--no-trunk'
        @no_trunk = true
      when '-n'
        @limit = remaining.shift.to_i
      else
        raise "Unknown argument: #{arg}"
      end
    end
  end

  def call
    parse!

    if @no_trunk
      system %(git log --graph --oneline --decorate -- #{@files.join(' ')})
    elsif @limit
      system %(git log --graph --oneline --decorate -n #{@limit} -- #{@files.join(' ')})
    elsif @branch == 'main' && @short
      system %(git log --graph --oneline --decorate origin/main^.. -- #{@files.join(' ')})
    elsif @branch != 'main' && @short
      system %(git log --graph --oneline --decorate main^.. -- #{@files.join(' ')})
    elsif @branch == 'main'
      system %(git log --graph --oneline --decorate --branches origin/main^.. -- #{@files.join(' ')})
    else
      system %(git log --graph --oneline --decorate --branches main^.. -- #{@files.join(' ')})
    end
  end
end

GitLogAll.call
