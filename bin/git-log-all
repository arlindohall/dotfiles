#!/usr/bin/env ruby
# frozen_string_literal: true
# typed: true

require 'English'
require 'sorbet-runtime'

class GitLogAll
  USAGE_STRING = <<~HELP
    Usage: git log-all [options]

    Options:
      -h, --help, help      Show this message
      -s, --short, short    Show only the commits between this branch and <trunk>
      -p, --                Specify files to include in the log
      --no-trunk            Do not include trunk commits (show history to beginning of time)
      --trunk <branch>      Specify a trunk branch
      -n <number>           Limit the number of commits
      -S                    Passthrough to git log -S, searches commits (add/remove only)
      -G                    Passthrough to git log -S, searches commits (add/remove/change)
  HELP

  def self.call
    git_branch = `git branch --show-current`.chomp
    exit $CHILD_STATUS.exitstatus unless $CHILD_STATUS.success?

    new(git_branch, ARGV.dup).call
  end

  def initialize(branch, args)
    @branch = branch
    @args = args
  end

  def usage(err = 0)
    warn USAGE_STRING
    exit err
  end

  def parse! # rubocop:disable all
    return if @parsed

    @parsed = true
    @files = []

    remaining = @args.dup
    while (arg = remaining.shift)
      case arg
      when '-h', '--help', 'help'
        usage 0
      when '-s', '--short', 'short'
        @short = true
      when '-p', '--'
        @files, remaining = remaining, @files
      when '--no-trunk'
        @trunk = false
      when '--trunk'
        @trunk = remaining.shift
      when '-n'
        @limit = remaining.shift.to_i
      when '-S'
        @hard_search = remaining.shift
      when '-G'
        @soft_search = remaining.shift
      else
        raise "Unknown argument: #{arg}"
      end
    end
  end

  def call
    parse!

    system %(git log --graph --oneline --decorate #{additional_args} #{files_args} #{search_args})
  end

  def files_args
    return unless @files.any?

    "-- #{@files.join(' ')}"
  end

  def additional_args
    AdditionalArgs.call(@branch, @trunk, @limit, @short == true)
  end

  def search_args
    return "-S #{@hard_search}" if @hard_search
    return "-G #{@soft_search}" if @soft_search

    nil
  end
end

class AdditionalArgs
  extend T::Sig

  class NoTrunk; def call = ''; end

  class Limit
    def initialize(limit) = @limit = limit
    def call = "-n #{@limit}"
  end

  class Short
    def initialize(trunk) = @trunk = trunk
    def call = "#{@trunk}^.."
  end

  class AllBranches
    def initialize(trunk) = @trunk = trunk
    def call = "--branches #{@trunk}^.."
  end

  def self.call(branch, limit, no_trunk, short)
    new(branch, limit, no_trunk, short).call
  end

  sig do
    params(
      branch: String,
      trunk: T.any(FalseClass, T.nilable(String)),
      limit: T.nilable(Integer),
      short: T::Boolean
    ).void
  end
  def initialize(branch, trunk, limit, short)
    @branch = branch
    @trunk = trunk
    @limit = limit
    @short = short
  end

  def call
    return NoTrunk.new.call if trunk == false
    return Limit.new(@limit).call if @limit
    return Short.new(trunk).call if @short

    AllBranches.new(trunk).call
  end

  def trunk
    return 'origin/main' if @trunk.nil? && @branch == 'main'
    return 'main' if @trunk.nil? && @branch != 'main'
    return false if @trunk == false

    @trunk
  end
end

GitLogAll.call
