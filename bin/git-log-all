#!/usr/bin/env ruby
# frozen_string_literal: true

class GitLogAll
  USAGE_STRING = <<~HELP
    Usage: git log-all [options]

    Options:
      -h, --help, help      Show this message
      short                 Show only the commits between this branch and <trunk>
  HELP

  def self.call
    git_branch = `git branch --show-current`.chomp
    exit $?.exitstatus unless $?.success?

    new(git_branch, ARGV.dup).call
  end

  def initialize(branch, args)
    @branch = branch
    @args = args
  end

  def usage(err = 0)
    warn USAGE_STRING
    exit err
  end

  def parse! # rubocop:disable all
    return if @parsed

    @parsed = true
    @files = []

    remaining = @args.dup
    while (arg = remaining.shift)
      case arg
      when '-h', '--help', 'help'
        usage 0
      when 'short'
        @short = true
      when '-p', '--'
        @files, remaining = remaining, @files
      when '--no-trunk'
        @no_trunk = true
      when '-n'
        @limit = remaining.shift.to_i
      else
        raise "Unknown argument: #{arg}"
      end
    end
  end

  def call
    parse!

    system %(git log --graph --oneline --decorate #{additional_args} #{files_args})
  end

  def files_args
    return unless @files.any?

    "-- #{@files.join(' ')}"
  end

  def additional_args
    AdditionalArgs.call(@branch, @limit, @no_trunk, @short)
  end
end

class AdditionalArgs
  class NoTrunk; def call = ''; end

  class Limit
    def initialize(limit) = @limit = limit
    def call = "-n #{@limit}"
  end

  class Short
    def initialize(branch) = @branch = branch
    def call = @branch == 'main' ? 'origin/main^..' : 'main^..'
  end

  class AllBranches
    def initialize(branch) = @branch = branch
    def call = @branch == 'main' ? '--branches origin/main^..' : '--branches main^..'
  end

  def self.call(branch, limit, no_trunk, short)
    new(branch, limit, no_trunk, short).call
  end

  def initialize(branch, limit, no_trunk, short)
    @branch = branch
    @limit = limit
    @no_trunk = no_trunk
    @short = short
  end

  def call
    return NoTrunk.new.call if @no_trunk
    return Limit.new(@limit).call if @limit
    return Short.new(@branch).call if @short

    AllBranches.new(@branch).call
  end
end

GitLogAll.call
