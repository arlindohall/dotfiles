#!/usr/bin/env ruby
# frozen_string_literal: true
# typed: true

# Used for the $CHILD_STATUS variable
require 'English'
require 'digest'

# Begin holding the screen so that it doesn't sleep and stop tests
# The thread will be collected on exit
Thread.new do
  warn 'Opening caffeinate command'
  system 'caffeinate -d'
ensure
  warn 'Closing caffeinate command'
end

class GitBranch
  class << self
    def branches
      return @branches if @branches

      @branches = find_branches

      return @branches unless Args.continue?

      @branches = @branches.drop_while { |br| br != Args.branch_at_run }
    end

    def find_branches # rubocop:disable all
      `git log --format="%H %D" #{base_rev_list_branch}..#{Args.end_branch}`
        .lines
        .map { |line| line.split[1..] }
        .filter { |line| line&.size&.positive? }
        .compact
        .map { |line| line.join(' ') }
        .map { |line| line.gsub('HEAD -> ', '') }
        .map { |line| line.split(', ').filter { |name| !name.start_with?('origin/') } }
        .flatten
        .compact
        .reverse
    end

    def git_changed_so_far
      filter_exists(GitBranch.current_branch)
    end

    def git_changed
      filter_exists(Args.end_branch)
    end

    def filter_exists(branch)
      `ls #{git_all(branch).join(' ')} 2>/dev/null`.split
    end

    def git_all(to_branch)
      `git diff #{base_rev_list_branch}..#{to_branch} --name-only --relative`.split
    end

    def changed_tests
      git_changed.filter { |fn| fn.include?('test') }
    end

    def base_rev_list_branch
      Args.start_branch == 'main' ? 'main' : "#{Args.start_branch}^"
    end

    def current_branch
      `git branch --show-current`.strip
    end
  end
end

class Args
  DEFAULT_STEPS = %w[test lint type_check].freeze
  VALID_STEPS = %w[test test_unified test_no_unified lint lint_unused type_check custom].freeze

  def self.end_branch = instance.end_branch
  def self.start_branch = instance.start_branch
  def self.branch_at_run = instance.branch_at_run
  def self.run_step = instance.run_step
  def self.command_overrides = instance.command_overrides
  def self.continue? = instance.continue
  def self.include_step?(step) = instance.steps.include?(step)
  def self.steps = instance.steps.join(',')

  def self.instance
    @instance ||= new(ARGV).tap(&:parse!)
  end

  attr_reader :argv, :start_branch, :end_branch, :run_step, :command_overrides, :continue, :steps, :branch_at_run

  def initialize(argv)
    @argv = argv
  end

  def parse! # rubocop:disable all
    args = @argv.to_a.dup
    until args.empty?
      case (arg = args.shift)
      when '--start'
        @start_branch = args.shift
      when '--end'
        @end_branch = args.shift
      when '--run'
        @run_step = args.shift
        validate_steps(@run_step)
      when '--continue'
        @continue = true
      when '--command'
        @command_overrides ||= []
        @command_overrides << args.shift
      when '--steps'
        @steps = args.shift.split(',')
        validate_steps(@steps)
      else
        puts "Unknown argument: #{arg} {full_args=#{@argv}}"
        puts "Usage: #{File.basename($PROGRAM_NAME)} --start <start_branch> [--end <end_branch> --run <run_step>]"
        abort
      end
    end

    @steps ||= DEFAULT_STEPS
    @start_branch ||= 'main'
    @end_branch ||= GitBranch.current_branch
    @branch_at_run = GitBranch.current_branch
  end

  def validate_steps(steps)
    [steps].flatten.each do |step|
      raise "Invalid step [#{step}]" unless VALID_STEPS.include?(step)
    end
  end

  def self.recreate_command
    [
      $PROGRAM_NAME,
      optional_arg('--start', start_branch),
      optional_arg('--end', end_branch),
      optional_arg('--run', run_step),
      command_overrides&.map { |cmd| optional_arg('--command', "'#{cmd}'") },
      optional_arg('--steps', steps),
      '--continue'
    ].flatten.compact.join(' ')
  end

  def self.optional_arg(name, value)
    [name, value] if value
  end
end

class CommandIo
  class CommandToGetChangedFiles
    def self.call
      "ls (git diff #{GitBranch.base_rev_list_branch}..#{Args.end_branch} --name-only --relative) 2>/dev/null"
    end
  end

  class CommandToGetChangedSoFarFiles
    def self.call
      "ls (git diff #{GitBranch.base_rev_list_branch}..#{GitBranch.current_branch} --name-only --relative) 2>/dev/null"
    end
  end

  class Test
    def name = :test

    def initialize(env = nil)
      @env = env
    end

    def fix_command
      return "dev test (#{CommandToGetChangedFiles.call}) --watch" unless @env

      "#{@env} dev test (#{CommandToGetChangedFiles.call}) --watch"
    end
  end

  class Lint
    def name = :lint

    def fix_command
      "pnpm eslint (#{CommandToGetChangedSoFarFiles.call}) --quiet --fix"
    end
  end

  class LintUnused
    def name = :lint_unused

    def fix_command
      'pnpm lint:unused-files --production'
    end
  end

  class TypeCheck
    def name = :type_check

    def fix_command
      Commands.command_string_for_type_check
    end
  end

  class Custom
    def initialize(command)
      @command = command
    end

    def name = :custom

    def fix_command
      warn '##### If you try to run this command, you may have issues with quotes' if @command.include?("'")
      "'#{@command}'"
    end
  end

  attr_reader :command, :command_type, :changeset

  def initialize(command:, command_type:, changeset:)
    @command = command
    @command_type = command_type
    @changeset = changeset
  end

  def execute
    system command.gsub('CHANGESET', changeset.join(' '))
  end

  def changeset_string
    changeset.join(' ')
  end

  def changeset_filename
    name = Digest::MD5.hexdigest(changeset_string)
    filename = "/tmp/changeset-#{name}.txt"

    File.write(filename, changeset_string)
    filename
  end

  def run_message
    <<~COMMAND_MESSAGE
      Including changeset
      ----------
      #{changeset_string[0...72]}#{' ...' if changeset_string.length > 72}
      ----------

      To see the changeset, run:
      ----------
      cat #{changeset_filename}
      ----------

      Running command from branch
      ----------
      #{GitBranch.current_branch}
      ----------

      Running command
      ----------
      #{command}
      ----------
    COMMAND_MESSAGE
  end

  def error_message
    <<~CLOSE_MESSAGE

      Exiting due to failure...

      Failed trying to run
      ----------
      #{command}
      ----------

      Failed running on branch
      ----------
      #{GitBranch.current_branch}
      ----------

      Started from branch
      ----------
      #{Args.end_branch}
      ----------

      To go back to the begining, please run:
      git switch #{Args.end_branch}

      To run this program again from the failed branch, please run:
      ----------
      #{Args.recreate_command}
      ----------

      This is a #{command_type.name} error, try running the following to debug/ fix it:
      ----------
      #{command_type.fix_command}
      ----------
    CLOSE_MESSAGE
  end
end

class Commands
  LINT = 'pnpm eslint CHANGESET --quiet'
  LINT_UNUSED = 'pnpm lint:unused-files --production'
  TEST = '/opt/dev/bin/dev test CHANGESET'
  TEST_UNIFIED = 'ADMIN_SETUP=unified /opt/dev/bin/dev test CHANGESET'

  def self.test
    Runner.try(
      command: TEST,
      changeset: GitBranch.changed_tests,
      command_type: CommandIo::Test.new
    )
  end

  def self.test_unified
    Runner.try(
      command: TEST_UNIFIED,
      changeset: GitBranch.changed_tests,
      command_type: CommandIo::Test.new('ADMIN_SETUP=unified')
    )
  end

  def self.lint
    Runner.try(
      command: LINT,
      changeset: GitBranch.git_changed_so_far,
      command_type: CommandIo::Lint.new
    )
  end

  def self.lint_unused
    Runner.try(
      command: LINT_UNUSED,
      changeset: GitBranch.git_changed,
      command_type: CommandIo::LintUnused.new
    )
  end

  def self.type_check
    Runner.try(
      command: command_string_for_type_check,
      changeset: GitBranch.git_changed,
      command_type: CommandIo::TypeCheck.new
    )
  end

  def self.command_string_for_type_check
    "pnpm nx affected -t typecheck --base=#{Args.start_branch} --head=#{GitBranch.current_branch} --parallel=8"
  end

  def self.all_custom
    Args.command_overrides&.each do |command|
      Runner.try(
        command: command,
        changeset: GitBranch.git_changed,
        command_type: CommandIo::Custom.new(command)
      )
    end
  end
end

class Runner
  attr_reader :command, :changeset, :command_type

  def self.try(command:, changeset:, command_type:)
    new(command:, changeset:, command_type:).try
  end

  def initialize(command:, changeset:, command_type:)
    @command = command
    @changeset = changeset
    @command_type = command_type
  end

  def try
    return unless changeset.any?

    run(
      CommandIo.new(
        command: command,
        command_type: command_type,
        changeset: changeset
      )
    )
  end

  def run(command_io)
    puts command_io.run_message

    command_io.execute
    return if $CHILD_STATUS.exitstatus.zero?

    puts command_io.error_message
    abort
  end
end

class Main
  def self.call = new.call

  def call
    GitBranch.branches.each do |target|
      branch(target)

      choose_commands
    end

    branch(Args.branch_at_run)
    puts 'Successfully ran all steps on all branches!'
  end

  def choose_commands
    warn "Deciding whether to run default commands overrides=#{Args.command_overrides}"
    return run_all_commands unless Args.command_overrides

    warn 'Running override'
    Commands.all_custom
  end

  def run_all_commands
    Commands.lint if Args.include_step?('lint')
    Commands.lint_unused if Args.include_step?('lint_unused')
    Commands.test if Args.include_step?('test')
    Commands.test_unified if Args.include_step?('test')
    Commands.type_check if Args.include_step?('type_check')
  end

  def branch(name)
    puts "branch: #{name}"
    system "git switch #{name}"
    abort unless $CHILD_STATUS.exitstatus.zero?
  end

  def try_to_run(command, changeset, command_type)
    Runner.try(command: command, changeset: changeset, command_type: command_type)
  end
end

Args.instance # initialize args before running anything

case Args.run_step
when 'test'
  Commands.test
  Commands.test_unified
when 'test_unified'
  Commands.test_unified
when 'test_no_unified'
  Commands.test
when 'lint'
  Commands.lint
when 'lint_unused'
  Commands.lint_unused
when 'type_check'
  Commands.type_check
when 'custom'
  Commands.all_custom
else
  Main.call
end
